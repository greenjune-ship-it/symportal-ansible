---

- name: Ensure Environment Directories Exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "/opt/{{ env }}"
    - "/mnt/{{ env }}"

- name: Clone GitHub Repository
  ansible.builtin.git:
    repo: https://github.com/reefgenomics/symportal-2.0.git
    dest: "/opt/{{ env }}/symportal-2.0"
    force: yes

- name: Determine Branch Name
  ansible.builtin.set_fact:
    # branch_to_checkout: "{{ 'develop' if env == 'dev' else 'main' }}"
    branch_to_checkout: "main"

- name: Checkout Branch
  ansible.builtin.git:
    repo: "/opt/{{ env }}/symportal-2.0"
    dest: "/opt/{{ env }}/symportal-2.0"
    version: "{{ branch_to_checkout }}"

- name: Render Docker Compose File
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "/opt/{{ env }}/symportal-2.0/docker-compose.yml"

- name: Render NGINX Configuration File
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/opt/{{ env }}/symportal-2.0/nginx/{{ item.dest }}"
  loop:
    - { src: nginx.conf.j2, dest: nginx.conf }
    - { src: project.conf.j2, dest: project.conf }

- name: Copy .env File
  ansible.builtin.copy:
    src: "/opt/.env"
    dest: "/opt/{{ env }}/symportal-2.0/.env"
    mode: '0600'  # Set permissions to read/write only for owner
    remote_src: yes

- name: Render Deploy Script
  ansible.builtin.template:
    src: run_docker.sh.j2
    dest: "/opt/{{ env }}/symportal-2.0/run_docker.sh"

- name: Render DB Backup Script
  ansible.builtin.template:
    src: db_backup.sh.j2
    dest: "/mnt/{{ env }}/db_backups/db_backup.sh"
  when: env == "prod"
  tags:
    - backups

- name: Copy Synology Backup Script
  ansible.builtin.copy:
    src: synology_backup.sh
    dest: "/mnt/synology_backup.sh"
  when: env == "prod"
  tags:
    - backups

- name: Copy DB Backups Removal Script
  ansible.builtin.copy:
    src: rm_old_db_backups.sh
    dest: "/mnt/{{ env }}/db_backups/rm_old_db_backups.sh"
  when: env == "prod"
  tags:
    - backups

- name: Copy Synology Backups Removal Script
  ansible.builtin.copy:
    src: rm_old_db_backups.sh
    dest: /mnt/rm_old_synology_backups.sh
  when: env == "prod"
  tags:
    - backups

- name: Add the Crontab Entry
  ansible.builtin.cron:
    name: "db_backup"
    user: "root"
    minute: 0
    hour: 0
    job: "/mnt/{{ env }}/db_backups/db_backup.sh"
  when: env == "prod"
  tags:
    - backups

- name: Configure logrotate
  ansible.builtin.copy:
    src: "postgresql-backup"
    dest: "/etc/logrotate.d/postgresql-backup"
  when: env == "prod"
  tags:
    - backups

- name: Create DB Backup Cron Job
  cron:
    name: "DB Backup"
    minute: "0"
    hour: "0"
    job: "/mnt/prod/db_backups/db_backup.sh"
    user: "root"
  when: env == "prod"
  tags:
    - backups

- name: Create Remove Old DB Backups Cron Job
  cron:
    name: "Remove Old DB Backups"
    minute: "0"
    hour: "0"
    weekday: "0"
    job: "/mnt/prod/db_backups/rm_old_db_backups.sh"
    user: "root"
  when: env == "prod"
  tags:
    - backups

- name: Create Synology Backup Cron Job
  cron:
    name: "Synology Backup"
    minute: "0"
    hour: "0"
    job: "/mnt/synology_backup.sh"
    user: "root"
  when: env == "prod"
  tags:
    - backups

- name: Create Remove Old Synology Backups Cron Job
  cron:
    name: "Remove Old Synology Backups"
    minute: "0"
    hour: "0"
    weekday: "0"
    job: "/mnt/rm_old_synology_backups.sh"
    user: "root"
  when: env == "prod"
  tags:
    - backups

#- name: Create and Start Docker Compose Services
#  community.docker.docker_compose:
#    project_src: "/opt/{{ env }}/symportal-2.0"
#  register: output
#
#- name: Show Results
#  ansible.builtin.debug:
#    var: output
